// Code AutoGenerated; DO NOT EDIT.

package gobotapi

import "github.com/Squirrel-Network/gobotapi/types"

func (ctx *BasicClient) handleUpdate(user *types.User, token string, update types.Update) {
	client := &Client{
		Token:       token,
		BasicClient: ctx,
		me:          user,
	}
	for _, x0 := range ctx.handlers["raw"] {
		ctx.concurrencyManager.Wait()
		go func(x any) {
			x.(func(*Client, types.Update))(client, update)
			ctx.concurrencyManager.Done()
		}(x0)
	}
	if update.Message != nil {
		for _, x0 := range ctx.handlers["message"] {
			ctx.concurrencyManager.Wait()
			go func(x any) {
				x.(func(*Client, types.Message))(client, *update.Message)
				ctx.concurrencyManager.Done()
			}(x0)
		}
	}
	if update.EditedMessage != nil {
		for _, x0 := range ctx.handlers["edited_message"] {
			ctx.concurrencyManager.Wait()
			go func(x any) {
				x.(func(*Client, types.Message))(client, *update.EditedMessage)
				ctx.concurrencyManager.Done()
			}(x0)
		}
	}
	if update.ChannelPost != nil {
		for _, x0 := range ctx.handlers["channel_post"] {
			ctx.concurrencyManager.Wait()
			go func(x any) {
				x.(func(*Client, types.Message))(client, *update.ChannelPost)
				ctx.concurrencyManager.Done()
			}(x0)
		}
	}
	if update.EditedChannelPost != nil {
		for _, x0 := range ctx.handlers["edited_channel_post"] {
			ctx.concurrencyManager.Wait()
			go func(x any) {
				x.(func(*Client, types.Message))(client, *update.EditedChannelPost)
				ctx.concurrencyManager.Done()
			}(x0)
		}
	}
	if update.InlineQuery != nil {
		for _, x0 := range ctx.handlers["inline_query"] {
			ctx.concurrencyManager.Wait()
			go func(x any) {
				x.(func(*Client, types.InlineQuery))(client, *update.InlineQuery)
				ctx.concurrencyManager.Done()
			}(x0)
		}
	}
	if update.ChosenInlineResult != nil {
		for _, x0 := range ctx.handlers["chosen_inline_result"] {
			ctx.concurrencyManager.Wait()
			go func(x any) {
				x.(func(*Client, types.ChosenInlineResult))(client, *update.ChosenInlineResult)
				ctx.concurrencyManager.Done()
			}(x0)
		}
	}
	if update.CallbackQuery != nil {
		for _, x0 := range ctx.handlers["callback_query"] {
			ctx.concurrencyManager.Wait()
			go func(x any) {
				x.(func(*Client, types.CallbackQuery))(client, *update.CallbackQuery)
				ctx.concurrencyManager.Done()
			}(x0)
		}
	}
	if update.ShippingQuery != nil {
		for _, x0 := range ctx.handlers["shipping_query"] {
			ctx.concurrencyManager.Wait()
			go func(x any) {
				x.(func(*Client, types.ShippingQuery))(client, *update.ShippingQuery)
				ctx.concurrencyManager.Done()
			}(x0)
		}
	}
	if update.PreCheckoutQuery != nil {
		for _, x0 := range ctx.handlers["pre_checkout_query"] {
			ctx.concurrencyManager.Wait()
			go func(x any) {
				x.(func(*Client, types.PreCheckoutQuery))(client, *update.PreCheckoutQuery)
				ctx.concurrencyManager.Done()
			}(x0)
		}
	}
	if update.Poll != nil {
		for _, x0 := range ctx.handlers["poll"] {
			ctx.concurrencyManager.Wait()
			go func(x any) {
				x.(func(*Client, types.Poll))(client, *update.Poll)
				ctx.concurrencyManager.Done()
			}(x0)
		}
	}
	if update.PollAnswer != nil {
		for _, x0 := range ctx.handlers["poll_answer"] {
			ctx.concurrencyManager.Wait()
			go func(x any) {
				x.(func(*Client, types.PollAnswer))(client, *update.PollAnswer)
				ctx.concurrencyManager.Done()
			}(x0)
		}
	}
	if update.MyChatMember != nil {
		for _, x0 := range ctx.handlers["my_chat_member"] {
			ctx.concurrencyManager.Wait()
			go func(x any) {
				x.(func(*Client, types.ChatMemberUpdated))(client, *update.MyChatMember)
				ctx.concurrencyManager.Done()
			}(x0)
		}
	}
	if update.ChatMember != nil {
		for _, x0 := range ctx.handlers["chat_member"] {
			ctx.concurrencyManager.Wait()
			go func(x any) {
				x.(func(*Client, types.ChatMemberUpdated))(client, *update.ChatMember)
				ctx.concurrencyManager.Done()
			}(x0)
		}
	}
	if update.ChatJoinRequest != nil {
		for _, x0 := range ctx.handlers["chat_join_request"] {
			ctx.concurrencyManager.Wait()
			go func(x any) {
				x.(func(*Client, types.ChatJoinRequest))(client, *update.ChatJoinRequest)
				ctx.concurrencyManager.Done()
			}(x0)
		}
	}
}
